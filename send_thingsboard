#!/home/numeric/.rbenv/shims/ruby
require 'net/http'
require 'json'
MAX_SENDING_CHARACTERS = 8000

if ARGV[0] && ARGV[1]
  log = ARGV[0]
  access_token = ARGV[1]
  `../log $0 "START transfer thingsboard with param class : #{ARGV[0].class}"`
  json = JSON.parse(log)
  `../log $0 "CHECK json converted file format : #{json.class}"`
  if json.is_a?(Array)
    success = true # initialize param success
    # needs to send in multiple psmall packages to avoid transmission error with big file
    size_nb = json.to_s.size
    elts_nb = json.count
    nb_of_partitions = size_nb / MAX_SENDING_CHARACTERS
    nb_elts_by_partition = elts_nb / nb_of_partitions
    array_of_jsons = json.each_slice(nb_elts_by_partition)
    `../log $0 "Data block: #{array_of_jsons.to_s[0...1000]}..."`
    api_url="http://192.168.0.216:8080/api/v1/#{access_token}/telemetry"
    `../log $0 "Api url to transfer is : #{api_url} - nb of transfers is #{nb_of_partitions + 1}"`
    uri = URI(api_url)
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Post.new(uri, initheader = {'Content-Type' =>'application/json'})
    array_of_jsons.each_with_index do |one_json, index|
      `../log $0 "Block json_#{index + 1}/#{nb_of_partitions + 1} : #{one_json.to_s[0...100]}..."`
      request.body = one_json.to_json
      api_response = http.request request
      `../log $0 "PASSED http request"`
      `../log $0 "FINISHED transfer json_#{index + 1}/#{nb_of_partitions + 1} with response_code #{api_response.code} and response_body #{api_response.body}"`
      success = success && (api_response.code == '200')
      sleep 1
    end
    `../log $0 "#{success ? 'SUCCESS' : 'FAIL'} : transfer to thnigsboard"`
  else
    `../log $0 "ERROR : converted data to send should be a json array"`
  end
else
  `../log $0 "ERROR parameters problem"
end
